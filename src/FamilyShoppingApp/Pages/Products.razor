@page "/products"
@using FamilyShoppingApp.Services
@using FamilyShoppingApp.ViewModels
@inject ProductService ProductService
@inject StoreService StoreService
@inject ExceptionHandlerService ExceptionHandler

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <input class="form-control" 
                   type="text" 
                   placeholder="Search products..." 
                   value="@searchTerm" 
                   @onchange="OnSearchChanged"
                   data-testid="search-input" />
            <button class="btn btn-outline-secondary" 
                    @onclick="SearchProducts"
                    data-testid="search-button">
                Search
            </button>
        </div>
    </div>
    <div class="col-md-6 text-end">
        <button class="btn btn-primary" 
                @onclick="ShowCreateForm" 
                data-testid="create-product-button">
            Add New Product
        </button>
    </div>
</div>

@if (showCreateEditForm)
{
    <div class="card mb-4" data-testid="product-form">
        <div class="card-header">
            <h5>@(editingProductId.HasValue ? "Edit Product" : "Create New Product")</h5>
        </div>
        <div class="card-body">
            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                <div class="mb-3">
                    <label for="productName" class="form-label">Product Name *</label>
                    <input id="productName" 
                           class="form-control @(IsNameValid ? "is-valid" : (hasNameBeenTouched ? "is-invalid" : ""))"
                           type="text" 
                           value="@currentProduct.Name" 
                           @onchange="OnNameChanged"
                           data-testid="product-name-input" />
                    @if (!IsNameValid && hasNameBeenTouched)
                    {
                        <div class="invalid-feedback" data-testid="name-validation-error">
                            Product name is required.
                        </div>
                    }
                </div>
                
                <div class="mb-3">
                    <label for="productNotes" class="form-label">Notes</label>
                    <textarea id="productNotes" 
                              class="form-control" 
                              rows="3"
                              value="@currentProduct.Notes" 
                              @onchange="OnNotesChanged"
                              data-testid="product-notes-input"></textarea>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Available in Stores</label>
                    <div class="form-check-container" data-testid="store-checkboxes">
                        @foreach (var store in availableStores)
                        {
                            <div class="form-check">
                                <input class="form-check-input" 
                                       type="checkbox" 
                                       id="store-@store.Id"
                                       checked="@currentProduct.SelectedStoreIds.Contains(store.Id)"
                                       @onchange="@(e => OnStoreSelectionChanged(store.Id, (bool)e.Value!))"
                                       data-testid="store-checkbox-@store.Id" />
                                <label class="form-check-label" for="store-@store.Id">
                                    @store.Name
                                </label>
                            </div>
                        }
                    </div>
                    @if (availableStores.Count == 0)
                    {
                        <div class="text-muted" data-testid="no-stores-warning">
                            No stores available. Please add stores first.
                        </div>
                    }
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" 
                            class="btn btn-success" 
                            disabled="@(!IsFormValid)"
                            data-testid="save-product-button">
                        @(editingProductId.HasValue ? "Update Product" : "Create Product")
                    </button>
                    <button type="button" 
                            class="btn btn-secondary" 
                            @onclick="CancelEdit"
                            data-testid="cancel-button">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
}

@if (filteredProducts.Any())
{
    <div class="table-responsive">
        <table class="table table-striped" data-testid="products-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Notes</th>
                    <th>Available Stores</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in filteredProducts)
                {
                    <tr data-testid="product-row">
                        <td data-testid="product-name">@product.Name</td>
                        <td data-testid="product-notes">@product.Notes</td>
                        <td data-testid="product-stores">
                            @if (product.SelectedStoreIds.Any())
                            {
                                @string.Join(", ", availableStores.Where(s => product.SelectedStoreIds.Contains(s.Id)).Select(s => s.Name))
                            }
                            else
                            {
                                <span class="text-muted">No stores assigned</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-2" 
                                    @onclick="() => EditProduct(product.Id)"
                                    data-testid="edit-product-button">
                                Edit
                            </button>
                            <button class="btn btn-sm btn-outline-danger" 
                                    @onclick="() => DeleteProduct(product.Id)"
                                    data-testid="delete-product-button">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    @if (totalProductCount > filteredProducts.Count)
    {
        <div class="alert alert-info" data-testid="search-results-info">
            Showing @filteredProducts.Count of @totalProductCount products
        </div>
    }
}
else if (!showCreateEditForm)
{
    @if (string.IsNullOrWhiteSpace(searchTerm))
    {
        <div class="alert alert-info" data-testid="no-products-message">
            No products found. Click "Add New Product" to get started.
        </div>
    }
    else
    {
        <div class="alert alert-warning" data-testid="no-search-results-message">
            No products found matching "@searchTerm". <a href="#" @onclick="ClearSearch" @onclick:preventDefault="true">Clear search</a>
        </div>
    }
}
