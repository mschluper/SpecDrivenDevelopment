@using FamilyShoppingApp.Services
@inject ExceptionHandlerService ExceptionHandler
@implements IDisposable

@if (errors.Any())
{
    <div class="error-container">
        @foreach (var error in errors)
        {
            <div class="error-toast" data-testid="error-toast">
                <div class="error-content">
                    <span class="error-message">@error</span>
                    <button class="error-close" @onclick="() => RemoveError(error)" data-testid="error-close">
                        Ã—
                    </button>
                </div>
            </div>
        }
    </div>
}

@code {
    private readonly List<string> errors = new();

    protected override void OnInitialized()
    {
        ExceptionHandler.OnError += AddError;
    }

    private void AddError(string errorMessage)
    {
        errors.Add(errorMessage);
        InvokeAsync(StateHasChanged);
        
        // Auto-remove error after 10 seconds
        _ = Task.Delay(10000).ContinueWith(_ =>
        {
            RemoveError(errorMessage);
        });
    }

    private void RemoveError(string errorMessage)
    {
        errors.Remove(errorMessage);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ExceptionHandler.OnError -= AddError;
    }
}
